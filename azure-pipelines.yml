# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yam
trigger:
- none
pool:
  vmImage: 'ubuntu-latest'

steps:
- script: echo Hello, world!
  displayName: 'Run a one-line script'

- task: PowerShell@2
  inputs:
    targetType: 'inline'
    script: |
      ## Only following 5 variables are required to send mail
      $myorg = “srrhr”
      $myproj = “devopsAPP”
      $sendmailto = “ssayini@hotmail.com,sr20180461@microsoft.com” 
      $mysubject = “DMS pipeline retults” 
      $mailbody = “DMS mail body details”
  
      $mailusers = “$sendmailto”
      $mymailusers = $mailusers -split “,”
      $pat = “Bearer $env:System_AccessToken”
      $myurl =”https://dev.azure.com/${myorg}/_apis/projects/${myproj}/teams?api-version=5.1"
      $data = Invoke-RestMethod -Uri “$myurl” -Headers @{Authorization = $pat}
      $myteams = $data.value.id
      $myusersarray = @()
      foreach($myteam in $myteams) {
      $usrurl = “https://dev.azure.com/${myorg}/_apis/projects/${myproj}/teams/"+$myteam+"/members?api-version=5.1"
      $userdata = Invoke-RestMethod -Uri “$usrurl” -Headers @{Authorization = $pat}
      $myusers = $userdata.value
      foreach($myuser in $myusers) {
      $myuserid = $myuser.identity.id
      $myusermail = $myuser.identity.uniqueName
      $myuserrecord = “$myuserid”+”:”+”$myusermail”
      $myusersarray += $myuserrecord
      }
      }
     
      $myfinalusersaray = $myusersarray | sort -Unique
     
      $myusershash = @{}
      for ($i = 0; $i -lt $myfinalusersaray.count; $i++)
      {
      $myusershash[$myfinalusersaray[$i].split(“:”)[1]] = $myfinalusersaray[$i].split(“:”)[0]
      }
     
      foreach($mymail in $mymailusers) {
      $myto = $myto +’”’+$myusershash[$mymail]+’”,’
      }
   
      $uri = “https://${myorg}.vsrm.visualstudio.com/${myproj}/_apis/Release/sendmail/$(RELEASE.RELEASEID)?api-version=3.2-preview.1"
      $requestBody =
      @”
      {
      “senderType”:1,
      “to”:{“tfsIds”:[$myto]},
      “body”:”${mailbody}”,
      “subject”:”${mysubject}”
      }
      “@
      Try {
      Invoke-RestMethod -Uri $uri -Body $requestBody -Method POST -Headers @{Authorization = $pat} -ContentType “application/json”
      }
      Catch {
      $_.Exception
      }